{"ast":null,"code":"import _objectSpread from \"/Users/zendy/Coder/react-training/to-do-list-react-redux-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from './../contains/ActionTypes';\n\nconst s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nconst randomID = () => {\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n};\n\nconst findIndex = (tasks, id) => {\n  let result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nconst data = JSON.parse(localStorage.getItem('tasks'));\nconst initialState = data ? data : [];\n\nconst myReducer = (state = initialState, action) => {\n  let id = '';\n  let index = -1;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.SAVE_TASK:\n      const task = {\n        id: action.task.id,\n        name: action.task.name,\n        status: action.task.status === 'true' ? true : false\n      };\n\n      if (!task.id) {\n        task.id = randomID();\n        state.push(task);\n      } else {\n        index = findIndex(state, task.id);\n      }\n\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      id = action.id;\n      index = findIndex(state, id);\n      state[index] = _objectSpread({}, state[index], {\n        status: !state[index].status\n      });\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      id = action.id;\n      index = findIndex(state, id);\n      state.splice(index, 1);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/Users/zendy/Coder/react-training/to-do-list-react-redux-project/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","randomID","findIndex","tasks","id","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","SAVE_TASK","name","status","push","setItem","stringify","UPDATE_STATUS_TASK","DELETE_TASK","splice"],"mappings":"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","sourcesContent":["import * as types from './../contains/ActionTypes';\n\nconst s4 = () => {\n    return  Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nconst randomID = () => {\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nconst findIndex = (tasks, id) => {\n    let result = -1;\n    tasks.forEach((task, index) => {\n        if(task.id === id) {\n            result = index;\n        }\n    });\n    return result;\n}\n\nconst data = JSON.parse(localStorage.getItem('tasks'));\nconst initialState = data ? data : [];\nconst myReducer = (state = initialState, action) => {\n    let id = '';\n    let index = -1;\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.SAVE_TASK:\n            const task = {\n                id: action.task.id,\n                name: action.task.name,\n                status: action.task.status === 'true' ? true : false\n            };\n            if (!task.id) {\n                task.id = randomID();\n                state.push(task);\n            } else {\n                index = findIndex(state, task.id);\n            }\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.UPDATE_STATUS_TASK:\n            id = action.id;\n            index = findIndex(state, id);\n            state[index] = {\n                ...state[index],\n                status : !state[index].status\n            }\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.DELETE_TASK:\n            id = action.id;\n            index = findIndex(state, id);\n            state.splice(index, 1);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return[...state];\n        default : return state;\n    }\n};\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}