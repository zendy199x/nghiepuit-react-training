{"ast":null,"code":"import * as types from './../contains/ActionTypes';\n\nconst s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nconst randomID = () => {\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n};\n\nconst findIndex = (tasks, id) => {\n  let result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id = id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nconst data = JSON.parse(localStorage.getItem(\"tasks\"));\nconst initialState = data ? data : [];\n\nconst myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      const newTask = {\n        id: randomID(),\n        name: action.task.name,\n        status: action.task.status === 'true' ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      console.log(action);\n      const id = action.id;\n      const index = findIndex(id);\n      state[index].status = !state[index].status;\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/Users/zendy/Coder/react-training/to-do-list-react-redux-project/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","randomID","findIndex","tasks","id","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","ADD_TASK","newTask","name","status","push","setItem","stringify","UPDATE_STATUS_TASK","console","log"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,2BAAvB;;AAEA,MAAMC,EAAE,GAAG,MAAM;AACb,SAAQC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EAA0CC,QAA1C,CAAmD,EAAnD,EAAuDC,SAAvD,CAAiE,CAAjE,CAAR;AACH,CAFD;;AAIA,MAAMC,QAAQ,GAAG,MAAM;AACnB,SAAON,EAAE,KAAKA,EAAE,EAAT,GAAc,GAAd,GAAoBA,EAAE,EAAtB,GAA2B,GAA3B,GAAiCA,EAAE,EAAnC,GAAwC,GAAxC,GAA8CA,EAAE,EAAhD,GAAqD,GAArD,GAA2DA,EAAE,EAA7D,GAAkEA,EAAE,EAApE,GAAyEA,EAAE,EAAlF;AACH,CAFD;;AAIA,MAAMO,SAAS,GAAG,CAACC,KAAD,EAAQC,EAAR,KAAe;AAC7B,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3B,QAAID,IAAI,CAACH,EAAL,GAAUA,EAAd,EAAkB;AACdC,MAAAA,MAAM,GAAGG,KAAT;AACH;AACJ,GAJD;AAKA,SAAOH,MAAP;AACH,CARD;;AAUA,MAAMI,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAb;AACA,MAAMC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAnC;;AAEA,MAAMM,SAAS,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAChD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKxB,KAAK,CAACyB,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKtB,KAAK,CAAC0B,QAAX;AACI,YAAMC,OAAO,GAAG;AACZjB,QAAAA,EAAE,EAAEH,QAAQ,EADA;AAEZqB,QAAAA,IAAI,EAAEL,MAAM,CAACV,IAAP,CAAYe,IAFN;AAGZC,QAAAA,MAAM,EAAEN,MAAM,CAACV,IAAP,CAAYgB,MAAZ,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC;AAHnC,OAAhB;AAKAP,MAAAA,KAAK,CAACQ,IAAN,CAAWH,OAAX;AACAT,MAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8Bf,IAAI,CAACgB,SAAL,CAAeV,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKtB,KAAK,CAACiC,kBAAX;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ;AACA,YAAMb,EAAE,GAAGa,MAAM,CAACb,EAAlB;AACA,YAAMI,KAAK,GAAGN,SAAS,CAACE,EAAD,CAAvB;AACAY,MAAAA,KAAK,CAACR,KAAD,CAAL,CAAae,MAAb,GAAsB,CAACP,KAAK,CAACR,KAAD,CAAL,CAAae,MAApC;AACAX,MAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8Bf,IAAI,CAACgB,SAAL,CAAeV,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ;AAAS,aAAOA,KAAP;AAnBb;AAqBH,CAtBD;;AAwBA,eAAeD,SAAf","sourcesContent":["import * as types from './../contains/ActionTypes';\n\nconst s4 = () => {\n    return  Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nconst randomID = () => {\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nconst findIndex = (tasks, id) => {\n    let result = -1;\n    tasks.forEach((task, index) => {\n        if (task.id = id) {\n            result = index;\n        }\n    });\n    return result;\n}\n\nconst data = JSON.parse(localStorage.getItem(\"tasks\"))\nconst initialState = data ? data : [];\n\nconst myReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case types.LIST_ALL:\n            return state;\n        case types.ADD_TASK:\n            const newTask = {\n                id: randomID(),\n                name: action.task.name,\n                status: action.task.status === 'true' ? true : false\n            }\n            state.push(newTask);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.UPDATE_STATUS_TASK:\n            console.log(action);\n            const id = action.id;\n            const index = findIndex(id);\n            state[index].status = !state[index].status;\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        default: return state;\n    }\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}