{"ast":null,"code":"import _objectSpread from \"/Users/zendy/Coder/react-training/to-do-list-react-redux-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./../contains/ActionTypes\";\n\nconst s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nconst randomID = () => {\n  return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n};\n\nconst findIndex = (tasks, id) => {\n  let result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nconst data = JSON.parse(localStorage.getItem(\"tasks\"));\nconst initialState = data ? data : [];\n\nconst myReducer = (state = initialState, action) => {\n  let id = \"\";\n  let index = -1;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.SAVE_TASK:\n      const task = {\n        id: action.task.id,\n        name: action.task.name,\n        status: action.task.status === \"true\" ? true : false\n      };\n\n      if (!task.id) {\n        task.id = randomID();\n        state.push(task);\n      } else {\n        index = findIndex(state, task.id);\n        state[index] = task;\n      }\n\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      id = action.id;\n      index = findIndex(state, id);\n      state[index] = _objectSpread({}, state[index], {\n        status: !state[index].status\n      });\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      id = action.id;\n      index = findIndex(state, id);\n      state.splice(index, 1);\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/Users/zendy/Coder/react-training/to-do-list-react-redux-project/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","randomID","findIndex","tasks","id","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","SAVE_TASK","name","status","push","setItem","stringify","UPDATE_STATUS_TASK","DELETE_TASK","splice"],"mappings":"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","sourcesContent":["import * as types from \"./../contains/ActionTypes\"\n\nconst s4 = () => {\n\treturn Math.floor((1 + Math.random()) * 0x10000)\n\t\t.toString(16)\n\t\t.substring(1)\n}\n\nconst randomID = () => {\n\treturn (\n\t\ts4() +\n\t\ts4() +\n\t\t\"-\" +\n\t\ts4() +\n\t\t\"-\" +\n\t\ts4() +\n\t\t\"-\" +\n\t\ts4() +\n\t\t\"-\" +\n\t\ts4() +\n\t\ts4() +\n\t\ts4()\n\t)\n}\n\nconst findIndex = (tasks, id) => {\n\tlet result = -1\n\ttasks.forEach((task, index) => {\n\t\tif (task.id === id) {\n\t\t\tresult = index\n\t\t}\n\t})\n\treturn result\n}\n\nconst data = JSON.parse(localStorage.getItem(\"tasks\"))\nconst initialState = data ? data : []\nconst myReducer = (state = initialState, action) => {\n\tlet id = \"\"\n\tlet index = -1\n\tswitch (action.type) {\n\t\tcase types.LIST_ALL:\n\t\t\treturn state\n\t\tcase types.SAVE_TASK:\n\t\t\tconst task = {\n\t\t\t\tid: action.task.id,\n\t\t\t\tname: action.task.name,\n\t\t\t\tstatus: action.task.status === \"true\" ? true : false\n\t\t\t}\n\t\t\tif (!task.id) {\n\t\t\t\ttask.id = randomID()\n\t\t\t\tstate.push(task)\n\t\t\t} else {\n\t\t\t\tindex = findIndex(state, task.id)\n\t\t\t\tstate[index] = task\n\t\t\t}\n\t\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(state))\n\t\t\treturn [...state]\n\t\tcase types.UPDATE_STATUS_TASK:\n\t\t\tid = action.id\n\t\t\tindex = findIndex(state, id)\n\t\t\tstate[index] = {\n\t\t\t\t...state[index],\n\t\t\t\tstatus: !state[index].status\n\t\t\t}\n\t\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(state))\n\t\t\treturn [...state]\n\t\tcase types.DELETE_TASK:\n\t\t\tid = action.id\n\t\t\tindex = findIndex(state, id)\n\t\t\tstate.splice(index, 1)\n\t\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(state))\n\t\t\treturn [...state]\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default myReducer\n"]},"metadata":{},"sourceType":"module"}