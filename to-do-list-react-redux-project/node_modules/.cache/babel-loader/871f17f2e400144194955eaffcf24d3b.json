{"ast":null,"code":"import _objectSpread from \"/Users/zendy/Coder/react-training/to-do-list-react-redux-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from './../constants/ActionTypes';\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar randomID = () => {\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n};\n\nvar findIndex = (tasks, id) => {\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  var id = '';\n  var index = -1;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.UPDATE_STATUS_TASK:\n      id = action.id;\n      index = findIndex(state, id);\n      state[index] = _objectSpread({}, state[index], {\n        status: !state[index].status\n      });\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      id = action.id;\n      index = findIndex(state, id);\n      state.splice(index, 1);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/Users/zendy/Coder/react-training/to-do-list-react-redux-project/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","randomID","findIndex","tasks","id","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","UPDATE_STATUS_TASK","status","setItem","stringify","DELETE_TASK","splice"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;;AAEA,IAAIC,EAAE,GAAG,MAAM;AACX,SAAQC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EAA0CC,QAA1C,CAAmD,EAAnD,EAAuDC,SAAvD,CAAiE,CAAjE,CAAR;AACH,CAFD;;AAIA,IAAIC,QAAQ,GAAG,MAAM;AACjB,SAAON,EAAE,KAAKA,EAAE,EAAT,GAAc,GAAd,GAAoBA,EAAE,EAAtB,GAA2B,GAA3B,GAAiCA,EAAE,EAAnC,GAAwC,GAAxC,GAA8CA,EAAE,EAAhD,GAAqD,GAArD,GAA2DA,EAAE,EAA7D,GAAkEA,EAAE,EAApE,GAAyEA,EAAE,EAAlF;AACH,CAFD;;AAIA,IAAIO,SAAS,GAAG,CAACC,KAAD,EAAQC,EAAR,KAAe;AAC3B,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3B,QAAGD,IAAI,CAACH,EAAL,KAAYA,EAAf,EAAkB;AACdC,MAAAA,MAAM,GAAGG,KAAT;AACH;AACJ,GAJD;AAKA,SAAOH,MAAP;AACH,CARD;;AAUA,IAAII,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC;;AACA,IAAIM,SAAS,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAiC;AAC7C,MAAIb,EAAE,GAAG,EAAT;AACA,MAAII,KAAK,GAAG,CAAC,CAAb;;AACA,UAAOS,MAAM,CAACC,IAAd;AACI,SAAKxB,KAAK,CAACyB,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKtB,KAAK,CAAC0B,kBAAX;AACIhB,MAAAA,EAAE,GAAGa,MAAM,CAACb,EAAZ;AACAI,MAAAA,KAAK,GAAGN,SAAS,CAACc,KAAD,EAAQZ,EAAR,CAAjB;AACAY,MAAAA,KAAK,CAACR,KAAD,CAAL,qBACOQ,KAAK,CAACR,KAAD,CADZ;AAEIa,QAAAA,MAAM,EAAG,CAACL,KAAK,CAACR,KAAD,CAAL,CAAaa;AAF3B;AAIAT,MAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BZ,IAAI,CAACa,SAAL,CAAeP,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKtB,KAAK,CAAC8B,WAAX;AACIpB,MAAAA,EAAE,GAAGa,MAAM,CAACb,EAAZ;AACAI,MAAAA,KAAK,GAAGN,SAAS,CAACc,KAAD,EAAQZ,EAAR,CAAjB;AACAY,MAAAA,KAAK,CAACS,MAAN,CAAajB,KAAb,EAAoB,CAApB;AACAI,MAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BZ,IAAI,CAACa,SAAL,CAAeP,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ;AACI,aAAOA,KAAP;AAnBR;AAqBH,CAxBD;;AA0BA,eAAeD,SAAf","sourcesContent":["import * as types from './../constants/ActionTypes';\n\nvar s4 = () => {\n    return  Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nvar randomID = () => {\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nvar findIndex = (tasks, id) => {\n    var result = -1;\n    tasks.forEach((task, index) => {\n        if(task.id === id){\n            result = index;\n        }\n    });\n    return result;\n}\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\nvar myReducer = (state = initialState, action) =>{\n    var id = '';\n    var index = -1;\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.UPDATE_STATUS_TASK:\n            id = action.id;\n            index = findIndex(state, id);\n            state[index] = {\n                ...state[index],\n                status : !state[index].status\n            };\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.DELETE_TASK:\n            id = action.id;\n            index = findIndex(state, id);\n            state.splice(index, 1);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        default:\n            return state;\n    }\n};\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}