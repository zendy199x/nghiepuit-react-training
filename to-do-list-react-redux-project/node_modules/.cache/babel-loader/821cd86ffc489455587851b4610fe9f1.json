{"ast":null,"code":"var _jsxFileName = \"/Users/zendy/Coder/react-training/to-do-list-react-redux-project/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport TaskList from \"./components/TaskList\";\nimport TaskForm from \"./components/TaskForm\";\nimport TaskControl from \"./components/TaskControl\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./actions/index\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onToggleForm = () => {\n      const itemEditing = this.props.itemEditing;\n\n      if (itemEditing && itemEditing.id !== \"\") {\n        this.props.onOpenForm();\n      } else {\n        this.props.onToggleForm();\n      }\n\n      this.props.onClearTask({\n        id: \"\",\n        name: \"\",\n        status: false\n      });\n    };\n  }\n\n  render() {\n    const isDisplayForm = this.props.isDisplayForm;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Qu\\u1EA3n L\\xFD C\\xF4ng Vi\\u1EC7c\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: isDisplayForm === true ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(TaskForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: isDisplayForm === true ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-plus mr-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), \"Th\\xEAm C\\xF4ng Vi\\u1EC7c\"), React.createElement(TaskControl, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(TaskList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n    itemEditing: state.itemEditing\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onClearTask: task => {\n      dispatch(actions.editTask(task));\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/zendy/Coder/react-training/to-do-list-react-redux-project/src/App.js"],"names":["React","Component","TaskList","TaskForm","TaskControl","connect","actions","App","onToggleForm","itemEditing","props","id","onOpenForm","onClearTask","name","status","render","isDisplayForm","mapStateToProps","state","mapDispatchToProps","dispatch","toggleForm","task","editTask","openForm"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport \"./App.css\"\nimport TaskList from \"./components/TaskList\"\nimport TaskForm from \"./components/TaskForm\"\nimport TaskControl from \"./components/TaskControl\"\nimport {connect} from \"react-redux\"\nimport * as actions from \"./actions/index\"\n\nclass App extends Component {\n\t// toggle redux\n\tonToggleForm = () => {\n\t\tconst {itemEditing} = this.props\n\t\tif (itemEditing && itemEditing.id !== \"\") {\n\t\t\tthis.props.onOpenForm()\n\t\t} else {\n\t\t\tthis.props.onToggleForm()\n\t\t}\n\t\tthis.props.onClearTask({\n\t\t\tid: \"\",\n\t\t\tname: \"\",\n\t\t\tstatus: false\n\t\t})\n\t}\n\n\trender() {\n\t\tconst {isDisplayForm} = this.props\n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t<h1>Quản Lý Công Việc</h1>\n\t\t\t\t\t<hr />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tisDisplayForm === true\n\t\t\t\t\t\t\t\t? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\"\n\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TaskForm />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tisDisplayForm === true\n\t\t\t\t\t\t\t\t? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\"\n\t\t\t\t\t\t\t\t: \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\tonClick={this.onToggleForm}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className=\"fa fa-plus mr-5\"></span>\n\t\t\t\t\t\t\tThêm Công Việc\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<TaskControl />\n\t\t\t\t\t\t<TaskList />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tisDisplayForm: state.isDisplayForm,\n\t\titemEditing: state.itemEditing\n\t}\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n\treturn {\n\t\tonToggleForm: () => {\n\t\t\tdispatch(actions.toggleForm())\n\t\t},\n\t\tonClearTask: task => {\n\t\t\tdispatch(actions.editTask(task))\n\t\t},\n\t\tonOpenForm: () => {\n\t\t\tdispatch(actions.openForm())\n\t\t}\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n"]},"metadata":{},"sourceType":"module"}